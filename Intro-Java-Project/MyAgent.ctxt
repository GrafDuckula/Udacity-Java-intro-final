#BlueJ class context
comment0.params=game\ iAmRed
comment0.target=MyAgent(Connect4Game,\ boolean)
comment0.text=\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\n\ \n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\n
comment1.params=
comment1.target=void\ move()
comment1.text=\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\n\ already\ been\ won.\n\ \n\ By\ the\ end\ of\ the\ move\ method,\ the\ agent\ should\ have\ placed\ one\ token\ into\ the\ game\ at\ some\n\ point.\n\ \n\ After\ the\ move()\ method\ is\ called,\ the\ game\ engine\ will\ check\ to\ make\ sure\ the\ move\ was\n\ valid.\ A\ move\ might\ be\ invalid\ if\:\n\ -\ No\ token\ was\ place\ into\ the\ game.\n\ -\ More\ than\ one\ token\ was\ placed\ into\ the\ game.\n\ -\ A\ previous\ token\ was\ removed\ from\ the\ game.\n\ -\ The\ color\ of\ a\ previous\ token\ was\ changed.\n\ -\ There\ are\ empty\ spaces\ below\ where\ the\ token\ was\ placed.\n\ \n\ If\ an\ invalid\ move\ is\ made,\ the\ game\ engine\ will\ announce\ it\ and\ the\ game\ will\ be\ ended.\n\ \n
comment2.params=columnNumber
comment2.target=void\ moveOnColumn(int)
comment2.text=\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\n\ \n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\n
comment3.params=column
comment3.target=int\ getLowestEmptyIndex(Connect4Column)
comment3.text=\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column.\n\ \n\ @param\ column\ The\ column\ to\ check.\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column;\ -1\ if\ the\ column\ is\ already\ full.\n
comment4.params=
comment4.target=int\ randomMove()
comment4.text=\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\n\ \n\ @return\ a\ random\ valid\ move.\n
comment5.params=iAmRed\ numberInLine
comment5.target=int\ playerCanWin(boolean,\ int)
comment5.text=\n\ Returns\ the\ column\ that\ would\ allow\ the\ Palyer\ to\ win\ or\ one\ step\ away\ from\ winnning.\n\ \n\ Check\ to\ see\ if\ Player\ has\ a\ winning\ move\ available\ to\ it.\ Implement\ this\ method\ to\ return\ what\ column\ would\n\ allow\ the\ Player\ to\ win\ or\ one\ step\ away\ from\ winning.\n\ @param\ iAmRed\ If\ the\ color\ of\ the\ player\ are\ red.\ \n\ @param\ numberInLine\ Number\ of\ token\ in\ a\ line.\ If\ you\ want\ to\ check\ if\ the\ player\ can\ win\ in\ one\ step,\ set\ it\ to\ 3.\ If\ you\ want\ to\ check\ if\ the\ player\ can\ win\ in\ two\ steps,\ set\ it\ to\ 2.\n\ @return\ the\ column\ that\ would\ allow\ the\ Palyer\ to\ win,\ return\ -1\ if\ no\ column\ can\ win\ or\ is\ one\ step\ away\ from\ winning.\n
comment6.params=iAmRed
comment6.target=java.util.ArrayList\ positionToAvoid(boolean)
comment6.text=\n\ Returns\ the\ column\ that\ the\ agent\ should\ avoid.\n\ \n\ Check\ to\ see\ if\ the\ column\ the\ agent\ is\ going\ to\ fill\ should\ be\ avoided,\ otherwise\ opponent\ will\ win.\n\ \n\ Implement\ this\ method\ to\ return\ which\ column\ the\ agent\ should\ avoid.\n\ \n\ @param\ iAmRed\ If\ the\ color\ of\ the\ agent\ is\ red\n\n\ @return\ the\ column\ that\ the\ agent\ should\ avoid.\n
comment7.params=playerName
comment7.target=void\ setName(java.lang.String)
comment7.text=\n\ Set\ the\ name\ of\ this\ agent.\n\n\ @param\ playerName\ name\ of\ this\ agent\n
comment8.params=
comment8.target=java.lang.String\ getName()
comment8.text=\n\ Returns\ the\ name\ of\ this\ agent.\n\n\ @return\ the\ agent's\ name\n
numComments=9
